[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 10.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 10.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 10.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

########################################
# Macro's 
########################################
#    STATUS_READY
#    STATUS_OFF
#    STATUS_PRINTING
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for basic control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    # Parameters
    #{% set bedtemp = params.BED|int %}
    #{% set hotendtemp = params.HOTEND|int %}
    #{% set chambertemp = params.CHAMBER|default(0)|int %}
    M117 Homing...                 ; display message
    LIGHT_ON
    M107 #turn off parts fan
    HOME #G28
    #BRUSH_NOZZLE
    Attach_Probe_Lock #prevent probe docking until unlocked, from klicky 
    Z_TILT_ADJUST
    STATUS_CALIBRATING_Z  ;Attach_Probe_Lock #prevent probe docking until unlocked, from klicky 
    CALIBRATE_Z
    #EXCLUDE_OBJECT_DEFINE
    STATUS_HEATING
    G0 X125 Y125 Z50 F36000
    M190 S[bed_temperature_initial_layer_single]
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM=50 MAXIMUM=65   ; wait for chamber temp
    G4 P1200000
    #M109 S[nozzle_temperature_initial_layer]
    BED_MESH_CLEAR
    #CLEAN_NOZZLE #requires brush/purge bucket, from decontaminator
    #BED_MESH_PROFILE LOAD=default #load saved mesh *or*
    BED_MESH_CALIBRATE PROFILE=default METHOD=automatic ADAPTIVE=1 #ADAPTIVE_MARGIN=5 #generate new mesh
    #CALIBRATE_Z
    Dock_Probe_Unlock #removes probe lock
    M109 S[nozzle_temperature_initial_layer]
    PURGE
    BRUSH_NOZZLE
    STATUS_PRINTING
    M117  #Printing 

    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    G0 X125 Y125 Z30 F36000

    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600

    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    STATUS_READY
    SET_NOZZLE_LEDS_OFF
    LIGHT_OFF
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    M18 #steppers off
    M106 S0 #fan off
    M117 Print Finished

[gcode_macro HOME]
# heat nozzle for best results
variable_x1: 179 # left of brush   <<<edit this value>>>
variable_x2: 187
variable_x3: 195
variable_x4: 203
variable_x5: 211
variable_x6: 219 # right or brush  <<<edit this value>>>
variable_y1: 255 # y value         <<<edit this value>>>
variable_y2: 256 # y value
variable_y3: 257 # y value
variable_y4: 258 # y value
variable_y5: 260 # y value
gcode:
    #UNSAFE_MOVE_TOOL Z=20 X=-20 Y=-20
    G90
    # Home X
    G4 P2000
    G28 X0
    #G4 P500
    #G1 X235 F1200
    #G4 P2000
    # Home Y
    G28 Y0
    #G4 P500
    #G1 Y253 F3000   
    G1 X147 F3000
    
    #BRUSH_NOZZLE
    G90 ; Absolute postitioning
    G0 X{x1} Y{y1} F5000 ;left position
     G91 ; Relative positioning 
    G0 E-1.5 F250
    G90 ; Absolute postitioning
    G0 X{x6} F10000  ;move right
    G0 X{x1} Y{y1}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y2}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y3}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y4}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y5}  ;move left
    G0 X{x2} Y{y1}
    G0 X{x3} Y{y5}
    G0 X{x4} Y{y1}
    G0 X{x5} Y{y5}
    G0 X{x6} Y{y1}
    G0 X{x5} Y{y5}
    G0 X{x4} Y{y1}
    G0 X{x3} Y{y5}
    G0 X{x2} Y{y1}
    G0 X{x1} Y{y5}
    
    # Home Z
    G28 Z0
    #G1 Z10 F1200
    
[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set nozzle_position = params.NOZZLE_POSITION %}
    {% set switch_position = params.SWITCH_POSITION %}
    {% set bed_position = params.BED_POSITION %}
    {% set switch_offset = params.SWITCH_OFFSET %}
    _CG28                         # can also be a conditional homing macro
    G0 X141 Y225
    G0 Y260
    BRUSH_NOZZLE
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    BASE_CALIBRATE_Z NOZZLE_POSITION={nozzle_position} SWITCH_POSITION={switch_position} BED_POSITION={bed_position} SWITCH_OFFSET={switch_offset}
    DOCK_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
    M117

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        HOME
    {% endif %}

[gcode_macro BRUSH_NOZZLE]
# heat nozzle for best results
variable_x1: 179 # left of brush   <<<edit this value>>>
variable_x2: 187
variable_x3: 195
variable_x4: 203
variable_x5: 211
variable_x6: 219 # right or brush  <<<edit this value>>>
variable_y1: 255 # y value         <<<edit this value>>>
variable_y2: 256 # y value
variable_y3: 257 # y value
variable_y4: 258 # y value
variable_y5: 260 # y value
#variable_z1: 25 # nozzle height   <<<edit this value>>>
gcode:
    M400  ;wait for buffer to clear
    _CG28
    G90 ; Absolute postitioning
    #G0 Z5 F3600     ;ensure nozzle is above endstop pin
    G0 X{x1} Y{y1} F5000 ;left position
    #G0 Z{z1}        ;move down, ready for brushing
    G91 ; Relative positioning 
    G0 E-1.5 F250
    G90 ; Absolute postitioning
    
    M117 Brushing Nozzle
    G0 X{x6} F10000  ;move right
    G0 X{x1} Y{y1}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y2}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y3}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y4}  ;move left
    G0 X{x6}        ;move right
    G0 X{x1} Y{y5}  ;move left
    G0 X{x2} Y{y1}
    G0 X{x3} Y{y5}
    G0 X{x4} Y{y1}
    G0 X{x5} Y{y5}
    G0 X{x6} Y{y1}
    G0 X{x5} Y{y5}
    G0 X{x4} Y{y1}
    G0 X{x3} Y{y5}
    G0 X{x2} Y{y1}
    G0 X{x1} Y{y5}
    #G0 Z25 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned
    
[gcode_macro PURGE]
gcode:
  {% set LENGTH = params.LENGTH|default(45)|float %} ; Purge length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if printer.configfile.settings.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 210 %}
    {% endif %}
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117 PURGING..
  G1 X234 Y258 F5000
  G91 ; Relative positioning 
  G1 E{LENGTH} F480 ; Purge 45mm of filament
  G1 E-1.5 
  G90 ; Absolute postitioning
  G4 P4000

[gcode_macro LIGHT_ON]
gcode:
    SET_LED LED=chember_light WHITE=0.75 #SET_FAN_SPEED FAN=chember_light SPEED=0.75 #SET_PIN PIN=chember_light VALUE=0.75
    
[gcode_macro LIGHT_FULL]
gcode:
    SET_LED LED=chember_light WHITE=1
    
[gcode_macro LIGHT_OFF]
gcode:
    SET_LED LED=chember_light WHITE=0

[gcode_macro DISPLAY_LIGHT_ON]
gcode:
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

[gcode_macro DISPLAY_LIGHT_OFF]
gcode:
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0

[gcode_macro BLACKOUT]
gcode:
   LIGHT_OFF
   status_off
   DISPLAY_LIGHT_OFF
   
[gcode_macro FILAMENT_UNLOAD]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E10 F350           # Move the extruder forwards 10mm at a speed of 350mm/minute
 G1 E-100 F350         # Move the extruder backwards 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.
 G4 P30000
 M18
 M104 S0

[gcode_macro FILAMENT_LOAD]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E100 F350          # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro PRESS_ADV_SETUP]
gcode:
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
  TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

#[gcode_macro START_PRINT]
#gcode:
#    STATUS_HEATING
#    #G28 X0
#    #G109 #wait for temp
#    G21 #metric values
#    G90 #absolute positioning
#    M82 #set extruder to absolute mode
#    M107 #start with the fan off
#    STATUS_HOMING
#    G28 X0 Y0 Z0 #move X/Y to min endstops
#    #G28 Z0 #move Z to min endstops
#    STATUS_CALIBRATING_Z
#    #Z_TILT_ADJUST
#    #G28
#    BED_MESH_CLEAR
#    STATUS_MESHING
#    BED_MESH_CALIBRATE PROFILE=default METHOD=automatic ADAPTIVE=1
#    M117 Printing...
#    STATUS_PRINTING
#   A list of G-Code commands to execute in place of "my_cmd". See
#   docs/Command_Templates.md for G-Code format. This parameter must
#   be provided.
#variable_<name>:
#   One may specify any number of options with a "variable_" prefix.
#   The given variable name will be assigned the given value (parsed
#   as a Python literal) and will be available during macro expansion.
#   For example, a config with "variable_fan_speed = 75" might have
#   gcode commands containing "M106 S{ fan_speed * 255 }". Variables
#   can be changed at run-time using the SET_GCODE_VARIABLE command
#   (see docs/Command_Templates.md for details). Variable names may
#   not use upper case characters.
#rename_existing:
#   This option will cause the macro to override an existing G-Code
#   command and provide the previous definition of the command via the
#   name provided here. This can be used to override builtin G-Code
#   commands. Care should be taken when overriding commands as it can
#   cause complex and unexpected results. The default is to not
#   override an existing G-Code command.

#[gcode_macro END_PRINT]
#gcode:
#    #M77 #Printing timer stop
#    M104 S0 #extruder heater off
#    M140 S0 #heated bed heater off (if you have it)
#    G92 Z0 #relative positioning
#    G1 E-1 F300  #retract the filament a bit before lifting the nozzle to release some of the pressure
#    G1 Z+2 F4800 #move Z up a bit and retract filament even more#G28 X0  #move X/Y to min endstops so the head is out of the way
#    G1 Y150 X205 F4800
#    G4 S10
#    G90 #absolute positioning
#    BED_MESH_CLEAR
#    M18 #steppers off
#    M106 S0 #fan off
#    STATUS_READY
#    SET_NOZZLE_LEDS_OFF
    

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]
recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

#[gcode_macro M600]
#gcode:
#    {% set X = params.X|default(50)|float %}
#    {% set Y = params.Y|default(0)|float %}
#    {% set Z = params.Z|default(10)|float %}
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-50 F1000
#    RESTORE_GCODE_STATE NAME=M600_state
    
#[filament_switch_sensor Filament_Runout]
##	Connected to E0 on mcu
#pause_on_runout: FALSE
#runout_gcode: 
#	M600
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#switch_pin: PG14

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 0) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84